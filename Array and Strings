#Contains Duplicate
Brute Force Solution
def containsDuplicate(nums):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] == nums[j]:
                return True
    return False
Optimal Solution
def containsDuplicate(nums):
    return len(set(nums)) != len(nums)
Missing Number
Brute Force Solution
def missingNumber(nums):
    n = len(nums)
    for i in range(n + 1):
        if i not in nums:
            return i
Optimal Solution
def missingNumber(nums):
    n = len(nums)
    return n * (n + 1) // 2 - sum(nums)
Numbers Disappeared in Array
Brute Force Solution
def findDisappearedNumbers(nums):
    n = len(nums)
    result = []
    for i in range(1, n + 1):
        if i not in nums:
            result.append(i)
    return result
Optimal Solution
def findDisappearedNumbers(nums):
    for num in nums:
        idx = abs(num) - 1
        nums[idx] = -abs(nums[idx])
    return [i + 1 for i, num in enumerate(nums) if num > 0]
Two Sum
Brute Force Solution
def twoSum(nums, target):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]
Optimal Solution
def twoSum(nums, target):
    seen = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in seen:
            return [seen[complement], i]
        seen[num] = i
Numbers Smaller Than Current
Brute Force Solution
def smallerNumbersThanCurrent(nums):
    result = []
    for i in range(len(nums)):
        count = 0
        for j in range(len(nums)):
            if nums[j] < nums[i]:
                count += 1
        result.append(count)
    return result
Optimal Solution
def smallerNumbersThanCurrent(nums):
    sorted_nums = sorted(nums)
    rank = {v: i for i, v in enumerate(sorted_nums)}
    return [rank[num] for num in nums]
Minimum Time Visiting All Points
Solution (Both Brute Force and Optimal are same)
def minTimeToVisitAllPoints(points):
    time = 0
    for i in range(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        time += max(abs(x2 - x1), abs(y2 - y1))
    return time
Spiral Matrix
Solution (Both Brute Force and Optimal are same)
def spiralOrder(matrix):
    result = []
    while matrix:
        result += matrix.pop(0)
        matrix = list(zip(*matrix))[::-1]
    return result
Number of Islands
Solution (DFS Approach)
def numIslands(grid):
    def dfs(grid, i, j):
        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':
            return
        grid[i][j] = '0'
        dfs(grid, i + 1, j)
        dfs(grid, i - 1, j)
        dfs(grid, i, j + 1)
        dfs(grid, i, j - 1)

    count = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == '1':
                dfs(grid, i, j)
                count += 1
    return count
Best Time to Buy and Sell Stock
Brute Force Solution
def maxProfit(prices):
    max_profit = 0
    for i in range(len(prices)):
        for j in range(i + 1, len(prices)):
            max_profit = max(max_profit, prices[j] - prices[i])
    return max_profit
Optimal Solution
def maxProfit(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit
Squares of a Sorted Array
Brute Force Solution
def sortedSquares(nums):
    return sorted([x * x for x in nums])
Optimal Solution
def sortedSquares(nums):
    result = [0] * len(nums)
    left, right = 0, len(nums) - 1
    for i in range(len(nums) - 1, -1, -1):
        if abs(nums[left]) > abs(nums[right]):
            result[i] = nums[left] * nums[left]
            left += 1
        else:
            result[i] = nums[right] * nums[right]
            right -= 1
    return result
3 sum
Brute Force Solution
def threeSum(nums):
    result = []
    nums.sort()
    n = len(nums)
    for i in range(n-2):
        for j in range(i+1, n-1):
            for k in range(j+1, n):
                if nums[i] + nums[j] + nums[k] == 0:
                    result.append([nums[i], nums[j], nums[k]])
    return result
Optimal Solution
def threeSum(nums):
    nums.sort()
    result = []
    for i in range(len(nums)-2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        left, right = i+1, len(nums)-1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total == 0:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left+1]:
                    left += 1
                while left < right and nums[right] == nums[right-1]:
                    right -= 1
                left += 1
                right -= 1
            elif total < 0:
                left += 1
            else:
                right -= 1
    return result
Longest Mountain in Array
Brute Force Solution
def longestMountain(arr):
    n = len(arr)
    result = 0
    for i in range(1, n-1):
        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:
            left = right = i
            while left > 0 and arr[left] > arr[left-1]:
                left -= 1
            while right < n-1 and arr[right] > arr[right+1]:
                right += 1
            result = max(result, right - left + 1)
    return result
Optimal Solution
def longestMountain(arr):
    n = len(arr)
    up = down = result = 0
    for i in range(1, n):
        if down and arr[i-1] < arr[i] or arr[i-1] == arr[i]:
            up = down = 0
        if arr[i-1] < arr[i]:
            up += 1
        if arr[i-1] > arr[i]:
            down += 1
        if up and down:
            result = max(result, up + down + 1)
    return result